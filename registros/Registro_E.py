import pandas as pd
from IPython.display import display
from .RegistroBase import RegistroBase


class RegistroE(RegistroBase):
    def __init__(self):
        super().__init__("E")

    def processar_linha(self, linha, mostrar=False):
        dados = {
            "tipo_registro": linha[0:1].strip(),
            "estabelecimento_submissor": linha[1:11].strip(),
            "bandeira_liquidacao": self.formatar_bandeira(linha[11:14]),
            "tipo_liquidacao": self.forma_pgto(linha[14:17]),
            "parcela": self.formatar_inteiro(linha[17:19]),
            "numero_total_parcelas": self.formatar_inteiro(linha[19:21]),
            "codigo_autorizacao": linha[21:27].strip(),
            "tipo_lancamento": self.tipo_lancamento(linha[27:29]),
            "chave_ur": linha[29:129].strip(),
            # "codigo_transacao_recebida": linha[129:151].strip(),
            # "codigo_ajuste": linha[151:155].strip(),
            "forma_pagamento": self.forma_pagamento(linha[155:158]),
            "indicativo_cielo_promo": linha[158:159].strip(),
            "indicativo_dcc": linha[159:160].strip(),
            "indicativo_comissao_minima": linha[160:161].strip(),
            "indicativo_recebimento_automatico": linha[161:162].strip(),
            "indicativo_taxa_zero": linha[162:163].strip(),
            "indicativo_transacao_rejeitada": linha[163:164].strip(),
            "indicativo_venda_tardia": linha[164:165].strip(),
            "bin_cartao": linha[165:171].strip(),
            "numero_cartao": linha[171:175].strip(),
            "nsu_doc": linha[175:181].strip(),
            # "numero_nota_fiscal": linha[181:191].strip(),
            # "tid": linha[191:211].strip(),
            # "codigo_pedido_referencia": linha[211:231].strip(),
            "taxa_mdr": self.formatar_taxa(linha[231:236]),
            "taxa_recebimento_automatico": self.formatar_taxa(linha[236:241]),
            "taxa_venda": self.formatar_taxa(linha[241:246]),
            # "sinal_valor_total_venda": linha[246:247].strip(),
            "valor_total_venda": self.formatar_valor(linha[247:260]),
            "sinal_valor_bruto": linha[260:261].strip(),
            "valor_bruto": self.formatar_valor(linha[261:274]),
            # "sinal_valor_liquido": linha[274:275].strip(),
            "valor_liquido": self.formatar_valor(linha[275:288]),
            # "sinal_valor_comissao": linha[288:289].strip(),
            "valor_comissao": self.formatar_valor(linha[289:302]),
            # "sinal_valor_comissao_minima": linha[302:303].strip(),
            "valor_comissao_minima": self.formatar_valor(linha[303:316]),
            # "sinal_valor_entrada": linha[316:317].strip(),
            # "valor_entrada": self.formatar_valor(linha[317:330]),
            # "sinal_valor_tarifa_mdr": linha[330:331].strip(),
            # "valor_tarifa_mdr": self.formatar_valor(linha[331:344]),
            # "sinal_valor_receba_rapido": linha[344:345].strip(),
            "valor_recebimento_automatico": self.formatar_valor(linha[345:358]),
            # "sinal_valor_saque": linha[358:359].strip(),
            # "valor_saque": self.formatar_valor(linha[359:372]),
            # "sinal_valor_tarifa_embarque": linha[372:373].strip(),
            # "valor_tarifa_embarque": self.formatar_valor(linha[373:386]),
            # "sinal_valor_pendente": linha[386:387].strip(),
            "valor_pendente": self.formatar_valor(linha[387:400]),
            # "sinal_valor_total_divida": linha[400:401].strip(),
            "valor_total_divida": self.formatar_valor(linha[401:414]),
            # "sinal_valor_cobrado": linha[414:415].strip(),
            # "valor_cobrado": self.formatar_valor(linha[415:428]),
            # "sinal_valor_tarifa_administrativa": linha[428:429].strip(),
            "valor_tarifa_administrativa": self.formatar_valor(linha[429:442]),
            # "sinal_valor_cielo_promo": linha[442:443].strip(),
            # "valor_cielo_promo": self.formatar_valor(linha[443:456]),
            # "sinal_valor_dcc": linha[456:457].strip(),
            # "valor_dcc": self.formatar_valor(linha[457:470]),
            "hora_transacao": self.formatar_hora(linha[470:476]),
            "grupo_cartoes": self.grupo_cartoes(linha[476:478]),
            # "cpf_cnpj_recebedor": self.formatar_cpf_cnpj(linha[478:492]),
            "bandeira_autorizacao": self.formatar_bandeira(linha[492:495]),
            "codigo_unico_venda": linha[495:510].strip(),
            # "codigo_original_venda": linha[510:525].strip(),
            # "identificador_efeito_negociacao": linha[525:540].strip(),
            "canal_venda": self.canal_venda(linha[540:543]),
            "numero_terminal": linha[543:551].strip(),
            "tipo_lancamento_original": self.tipo_lancamento(linha[551:553]),
            "tipo_transacao": self.forma_pgto(linha[553:556]),
            # "uso_cielo_1": linha[556:560].strip(),
            "codigo_modelo_precificacao": self.tipo_precificacao(linha[560:565]),
            "data_autorizacao_venda": self.formatar_data_br(linha[565:573]),
            "data_captura": self.formatar_data_br(linha[573:581]),
            "data_lancamento": self.formatar_data_br(linha[581:589]),
            "data_original_lancamento": self.formatar_data_br(linha[589:597]),
            "numero_lote": linha[597:604].strip(),
            "numero_transacao_processada": linha[604:626].strip(),
            # "motivo_rejeicao": linha[626:629].strip(),
            "data_vencimento_original": self.formatar_data_br(linha[629:637]),
            # "matriz_pagamento": linha[637:647].strip(),
            "tipo_cartao": linha[647:649].strip(),
            # "origem_cartao": linha[649:650].strip(),
            # "indicativo_mdr_tipo_cartao": linha[650:651].strip(),
            "indicativo_parcelado_cliente": linha[651:652].strip(),
            "banco": linha[652:656].strip(),
            "agencia": linha[656:661].strip(),
            "conta": linha[661:681].strip(),
            "digito_conta": linha[681:682].strip(),
            # "arn": linha[682:705].strip(),
            "indicativo_negociacao_cielo": linha[705:706].strip(),
            # "tipo_captura": linha[706:708].strip(),
            # "cpf_cnpj_negociador": linha[708:722].strip(),
            # "uso_cielo_2": linha[722:760].strip(),
        }

        df_registro_E = pd.DataFrame([dados])

        if mostrar:
            display(df_registro_E)

        return df_registro_E
